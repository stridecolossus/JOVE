pipeline
- re-build pipeline after window viewport/focus change
- check for depth attachment in frame-buffer::create
- caching, https://github.com/KhronosGroup/Vulkan-Samples/blob/master/samples/performance/pipeline_cache/pipeline_cache_tutorial.md

model
- integrate Sphere helper and UnitCircle and Matrix.rotation()?
- sphere/conic builder, uses unit circle, add pole, add ring with N points / segment
- extrusion, creates 'cylinder' from 2D shape + normal + dist (segment) from previous, iterative

demo
- skybox, cube map, skydome?
- instancing, cubes then tree model, multiple models per OBJ? names? => materials?
- render loop throttle? FPS, elapsed, etc
- lighting, materials
- solar system, scene graph
- terrain rendering, tiled, LOD, tesselation shader, loader from gray-scale, oct-tree?
- geometry shader, normals, bounding volumes (spheres as x2 circles)

blog
- back to front? should start with desired outcome (demo, tests) and then describe implementation? e.g. render pass builder THEN the sub builders, etc.
- add instance + ref factory (?)

core
- allocator merge released blocks (de-fragmentation)
- swizzle & buffer image in one go?
- DeviceFeatures - tests/annotations for required features? techniques -> materials ~ available features

scene
- Sphere helper class, plus Sphere & centre point? integrate with SphereVolume
- is Ray.Intersection what we actually need? would need ray + volume in intersection record to be useful in stream processing?
- composite object for near/far plane distances, FOV, projection matrix, i.e. stuff used in scene? or Scene object?
- scene = n/f, FOV, root node, projection, viewport, camera
- scene nodes - tree, node = transform, renderable object, material (shader) + properties (UBO, push constants)
- how do descriptor sets fit here? part of material?
- visitor, generates nodes to render (occlusion, volumes), opaque/translucent/skybox render queues
- world and local transforms? visitor to update
- node inheritance? e.g. transform change propagates up, volume change down, etc?
- should volumes enforce intersect(sphere) and intersect(extents)? or ABC? or leave as-is? should frustum really be a volume?

project
- separate demo tree using Spring?

sphere builder
- https://www.mbsoftworks.sk/tutorials/opengl4/022-cylinder-and-sphere/
- http://in4k.untergrund.net/html_articles/hugi_27_-_coding_corner_polaris_sphere_tessellation_101.htm
- https://lindenreid.wordpress.com/2017/12/03/simple-mesh-tessellation-triangulation-tutorial/
- mesh builder?
- strip builder?
- add degenerate triangle

other features
- texture fonts?
- terrain grid from height-map
- OpenAL audio

August 2021
- format domain class incorporating builder?
- surface class really needs to be dependant on logical dev? or physical? just instance?
- selector init when selecting physical device and then used to create logical? still side effects but simpler?
- instead of handle can type mapper be for i/f so can then pass domain objects rather than handle?
- component should be vertex attribute to match VK terminology?
- image class wrapper for buffered image, no need for ctor since just replicates
- descriptor set bindings created from layout and not other way round, prevents binding reuse, less steps? more logical? 
- ditto render pass attachments
- why specify same info to descriptor set pool, shouldn't it know what sets it will be allocating?



