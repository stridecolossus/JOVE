PARAMETER / STRUCTURE FIELD

type                    layout          element
----                    ------          -------

primitive               atomic
primitive[]             address         ???
string                  address
string[]                address         address         <--- contiguous
IntEnum                 int
EnumMask                int
structure               address         layout
structure[]             address         layout[]        <--- contiguous     

RETURNED PARAMETER

type                    layout          element         example
----                    ------          -------         -------

int ref                 address         int             uint32_t*
ptr ref                 address         address         VkInstance*
returned structure      address         struct          VkPhysicalDeviceFeatures*
returned structure[]    address         struct[]        VkLayerProperties*                  <--- contiguous

=>

archetype       layout      marshal                     unmarshal
---------       ------      -------                     ---------

primitive       value       identity                    identity
reference       address     function[ref -> address]    function[address -> ref]
structure       struct      consumer[address]           function[address -> struct]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// extensions & layers
int vkEnumerateInstanceExtensionProperties(String pLayerName, NativeReference<Integer> pPropertyCount, @Returned VkExtensionProperties[] pProperties);
int vkEnumerateInstanceLayerProperties(NativeReference<Integer> pPropertyCount, @Returned VkLayerProperties[] pProperties);
- VkExtensionProperties -> String extensionName = byte[256]
- ditto 2x VkLayerProperties

// retrieve required extensions
MemorySegment glfwGetRequiredInstanceExtensions(NativeReference<Integer> count);

// create instance
int vkCreateInstance(VkInstanceCreateInfo pCreateInfo, Handle pAllocator, NativeReference<Handle> pInstance);
- VkInstanceCreateInfo -> String[] ppEnabledExtensionNames
- VkInstanceCreateInfo -> VkApplicationInfo

// enumerate devices
int vkEnumeratePhysicalDevices(Instance instance, NativeReference<Integer> pPhysicalDeviceCount, @Returned NativeReference<Handle[]> devices);

// device properties
void vkGetPhysicalDeviceQueueFamilyProperties(Handle device, NativeReference<Integer> pQueueFamilyPropertyCount, @Returned VkQueueFamilyProperties[] props);
void vkGetPhysicalDeviceFeatures(Handle device, @Returned VkPhysicalDeviceFeatures features);
- VkQueueFamilyProperties -> VkExtent3D [embedded] 

// select device for surface
int glfwCreateWindowSurface(Handle instance, Window window, Handle allocator, NativeReference<Handle> surface);
int vkGetPhysicalDeviceSurfaceSupportKHR(PhysicalDevice device, int queueFamilyIndex, Handle surface, NativeReference<Integer> supported);

// create logical device 
int vkCreateDevice(PhysicalDevice physicalDevice, VkDeviceCreateInfo pCreateInfo, Handle pAllocator, NativeReference<Handle> device);
void vkGetDeviceQueue(Handle device, int queueFamilyIndex, int queueIndex, NativeReference<Handle> pQueue);
- VkDeviceCreateInfo -> VkDeviceQueueCreateInfo[] pQueueCreateInfos
- VkDeviceQueueCreateInfo -> float[] pQueuePriorities = const float*

// create swap chain
int vkCreateSwapchainKHR(DeviceContext device, VkSwapchainCreateInfoKHR pCreateInfo, Handle pAllocator, NativeReference<Handle> pSwapchain);
int vkGetSwapchainImagesKHR(DeviceContext device, Handle swapchain, NativeReference<Integer> pSwapchainImageCount, @Returned Handle[] pSwapchainImages);

// buffer
void vkCmdBindVertexBuffers(CommandBuffer commandBuffer, int firstBinding, int bindingCount, VertexBuffer[] pBuffers, long[] pOffsets);
- VkBufferCreateInfo -> int[] pQueueFamilyIndices = const uint32_t*

// render loop
int vkQueueSubmit(WorkQueue queue, int submitCount, VkSubmitInfo[] pSubmits, Fence fence);



-------------------------------

demo
- skydome
- lighting, materials
- solar system

scene
- composite object for near/far plane distances, FOV, projection matrix, i.e. stuff used in scene? or Scene object?
- node inheritance? e.g. transform change propagates up, volume change down, etc?
- should volumes enforce intersect(sphere) and intersect(extents)? or ABC? or leave as-is? should frustum really be a volume?

sphere builder
- https://www.mbsoftworks.sk/tutorials/opengl4/022-cylinder-and-sphere/
- http://in4k.untergrund.net/html_articles/hugi_27_-_coding_corner_polaris_sphere_tessellation_101.htm
- https://lindenreid.wordpress.com/2017/12/03/simple-mesh-tessellation-triangulation-tutorial/
- sphere/conic builder, uses unit circle, add pole, add ring with N points / segment
- extrusion, creates 'cylinder' from 2D shape + normal + dist (segment) from previous, iterative

text
- atlas?
- TT fonts?
- per character?
- or render using Java text -> draw to Java image -> VK image? 
- https://snorristurluson.github.io/TextRenderingWithFreetype/

features todo
- enhance Work to chain sequences + sync, e.g. for loading a texture, Q - use semaphores, or fence for each step, both?
- custom application properties? using Jackson, or SnakeYAML, JSON, etc
- degenerate triangles for strip?
- normals via geometry shader
- mesh shader
- dynamic descriptors sets and uniform buffers (?)
- OpenAL streaming audio (queue) https://github.com/kcat/openal-soft/wiki/Programmer%27s-Guide#queuing-buffers-on-a-source
- memory region rounding if not host coherent

blog
- pipeline cache
- check out old blog

improvements
- cube builder optional normals, review mesh compute normals, also parallel stream
- sort out / aggregate maths stuff: cosine, inverse root, acos? atan? others?  Inject into normalize() and converter methods as appropriate, or uses default (which should be class not interface?) 
- pipeline cache could use Java prefs? and/or user home folder?
- interpolator revamp
- joystick from desktop service
- code gen type mapper sucks, should be declarative but not using nasty switches? table driven somehow (we already have the table!), functional?
- vkGetPhysicalDeviceImageFormatProperties? to check attachment format vs layouts
- attachment image stereotypes? why pass layout into subpass? why separate methods to add colour/depth?

particles
- particle class ~ use case? position, timestamp(?), colour, size?
- or similar to vertex?
- start/end size => vertex attribute
- low/high fade, when particles start to fade, high = lifetime
- storage buffer, for whole scenes (!) or particles in compute pipeline, https://vkguide.dev/docs/chapter-4/storage_buffers/

typedef void (VKAPI_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void (VKAPI_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);

