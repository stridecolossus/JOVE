package org.sarge.jove.control;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import org.sarge.jove.control.InputEvent.Type;

/**
 * An <i>input event</i> describes an event generated by a device.
 * @author Sarge
 * @see Device
 */
public interface InputEvent<T extends Type> {
	/**
	 * @return Type of this event
	 */
	Type type();

	/**
	 * An <i>event type</i> is the descriptor for an input event.
	 */
	interface Type {
		/**
		 * Name delimiter.
		 */
		String DELIMITER = "-";

		/**
		 * @return Event name qualifier
		 */
		String name();

		/**
		 * Generates the string representation of the given event-type.
		 * @param type Event-type
		 * @return String representation
		 * @see Parser
		 */
		static String write(Type type) {
			final StringBuilder sb = new StringBuilder();
			sb.append(type.getClass().getName());
			sb.append(DELIMITER);
			sb.append(type.name());
			return sb.toString();
		}

		/**
		 * The <i>event type parser</i> instantiates an event-type from its string representation.
		 * TODO
		 */
		class Parser {
			private final Map<String, Method> registry = new HashMap<>();

			/**
			 * Parses and event-type from its string representation.
			 * @param str String representation of the event
			 * @return Parsed event-type
			 * @throws RuntimeException if the event-type cannot be parsed
			 */
			public Type parse(String str) {
				// Tokenize
				final int idx = str.indexOf(DELIMITER);
				if((idx == -1) || (idx == 0) || (idx == str.length())) {
					throw new IllegalArgumentException(String.format("Invalid event-type representation: [%s]", str));
				}

				// Lookup parse constructor
				final Method parse = registry.computeIfAbsent(str.substring(0, idx), Parser::register);

				// Invoke parser
				try {
					return (Type) parse.invoke(null, str.substring(idx + 1));
				}
				catch(Exception e) {
					throw new RuntimeException(String.format("Error parsing event-type: [%s]", str), e);
				}
			}

			/**
			 * Looks up the parse method for the given event-type.
			 * @param name Event-type class name
			 * @return Parse method
			 * @throws IllegalArgumentException if the event-type is unknown or the parse method cannot be found
			 */
			private static Method register(String name) {
				try {
					final Class<?> clazz = Class.forName(name);
					final Method method = clazz.getDeclaredMethod("parse", String.class);
					if(method.getReturnType() != clazz) throw new IllegalArgumentException("Invalid return type for parse method: " + name);
					return method;
				}
				catch(ClassNotFoundException e) {
					throw new IllegalArgumentException("Unknown event type: " + name, e);
				}
				catch(NoSuchMethodException e) {
					throw new IllegalArgumentException("Cannot find parse method: " + name, e);
				}
				catch(Exception e) {
					throw new IllegalArgumentException("Error looking up parse method: " + name, e);
				}
			}
		}
	}
}
