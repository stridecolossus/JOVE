package org.sarge.jove.control;

import static org.sarge.jove.util.Check.notNull;
import static org.sarge.jove.util.Check.zeroOrMore;

import java.util.StringJoiner;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.sarge.jove.common.Coordinate;
import org.sarge.jove.util.Check;

/**
 * An <i>event</i> describes a platform-independent input action generated by a device.
 * @author Sarge
 */
public record Event(Event.Type type, Coordinate pos) {
	/**
	 * Constructor.
	 * @param type		Event type
	 * @param pos		Position
	 * @throws IllegalArgumentException if a position is required for the given type of event
	 */
	public Event {
		Check.notNull(type);
		if(type.cat.isPositional() == (pos == null)) throw new IllegalArgumentException(String.format("Invalid position for event: type=%s pos=%s", type, pos));
	}

	/**
	 * Constructor for an event without a position.
	 * @param type Event type
	 * @throws IllegalArgumentException if a position is required for the given type of event
	 */
	public Event(Type type) {
		this(type, null);
	}

	/**
	 * Event handler.
	 */
	@FunctionalInterface
	public interface Handler {
		/**
		 * Handles an event.
		 * @param event Event
		 */
		void handle(Event event);
	}

	/**
	 * Event categories.
	 */
	public enum Category {
		/**
		 * Keyboard or controller button.
		 */
		BUTTON,

		/**
		 * Mouse-click or screen-touch.
		 */
		CLICK,

		/**
		 * Mouse-move.
		 */
		MOVE,

		/**
		 * Mouse-wheel or controller zoom.
		 */
		ZOOM;

		/**
		 * @return Whether this event category has an associated position attribute
		 */
		public boolean isPositional() {
			return switch(this) {
				case CLICK, MOVE -> true;
				default -> false;
			};
		}

		/**
		 * @return Whether this category has an associated identifier
		 */
		public boolean isIdentifier() {
			return switch(this) {
				case BUTTON, CLICK -> true;
				default -> false;
			};
		}
	}

	/**
	 *
	 */
	public static final class Type {
		private static final String DELIMITER = "-";

		/**
		 * Descriptor for a move event.
		 */
		public static final Type MOVE = new Type(Category.MOVE);

		/**
		 * Descriptor for a zoom event.
		 */
		public static final Type ZOOM = new Type(Category.ZOOM);

		/**
		 * Parses an event type from the given string.
		 * TODO
		 * @param str String
		 * @return Event type
		 */
		public static Type parse(String str) {
			// Tokenize type
			final String[] tokens = StringUtils.split(str, DELIMITER);

			final Category cat = Category.valueOf(tokens[0]);

			final int id = switch(cat) {



				default -> {
					yield 0;
				}
			};

			return new Type(cat, id);
		}

		private final Category cat;
		private final int id;
		private final transient int hash;

		/**
		 * Constructor.
		 * @param cat		Event category
		 * @param id		Identifier
		 */
		public Type(Category cat, int id) {
			this.cat = notNull(cat);
			this.id = zeroOrMore(id);
			this.hash = new HashCodeBuilder().append(cat).append(id).build();
		}

		/**
		 * Local constructor.
		 */
		private Type(Category cat) {
			this(cat, 0);
			if(cat.isIdentifier()) throw new IllegalArgumentException();
		}

		/**
		 * @return Event category
		 */
		public Category category() {
			return cat;
		}

		/**
		 * @return Identifier
		 */
		public int id() {
			return id;
		}

		@Override
		public final int hashCode() {
			return hash;
		}

		@Override
		public boolean equals(Object obj) {
			if(obj == this) {
				return true;
			}

			return
					(obj instanceof Type that) &&
					(this.cat == that.cat) &&
					(this.id == that.id);
		}

		@Override
		public String toString() {
			final StringJoiner str = new StringJoiner(DELIMITER);
			str.add(cat.name());
			if(cat.isIdentifier()) {
				str.add(String.valueOf(id));
			}
			return str.toString();
		}
	}
}
