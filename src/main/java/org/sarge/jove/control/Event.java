package org.sarge.jove.control;

import java.util.Arrays;
import java.util.Collection;
import java.util.Set;
import java.util.function.Consumer;

import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * An <i>event</i> describes an input from the client.
 * <p>
 * An event is comprised of:
 * <ul>
 * <li>a <i>name</i> that identifies the event</li>
 * <li>a {@link Type} which describes the event category</li>
 * <li>the {@link Source} that generated the event</li>
 * </ul>
 * <p>
 * @author Sarge
 */
public interface Event {
	/**
	 * Event name delimiter.
	 */
	String DELIMITER = "-";

	/**
	 * Builds a delimited event name from the given tokens.
	 * @param tokens Name tokens
	 * @return Event name
	 */
	static String name(String... tokens) {
		return String.join("-", Arrays.asList(tokens));
	}

	/**
	 * @return Event identifier
	 */
	String name();

	/**
	 * @return Type of event
	 */
	Type type();

	/**
	 * @return Source of this event
	 */
	Source source();

	/**
	 * An <i>event type</i> is a descriptor for a category of events.
	 */
	record Type(String name) {
		@Override
		public String toString() {
			return name;
		}
	}

	/**
	 * An <i>event source</i> generates events.
	 */
	interface Source {
		/**
		 * @return Device
		 */
		Device device();

		/**
		 * @return Types of events generated by this source
		 */
		Collection<Type> types();

		/**
		 * Binds the given handler to this source.
		 * @param handler Event handler
		 */
		void bind(Consumer<Event> handler);

		/**
		 * Disables this source.
		 */
		void disable();
	}

	/**
	 * A <i>device</i> is comprised of a number of event sources.
	 */
	interface Device {
		/**
		 * @return Event sources
		 */
		Set<Source> sources();

		/**
		 * Closes this device.
		 */
		void close();
	}

	/**
	 * Skeleton implementation.
	 */
	abstract class AbstractEvent implements Event {
		private final String name;
		private final Type type;
		private final Source src;

		/**
		 * Constructor.
		 * @param name		Event identifier
		 * @param type		Type of event
		 * @param src		Source
		 */
		protected AbstractEvent(String name, Type type, Source src) {
			this.name = name;
			this.type = type;
			this.src = src;
		}

		/**
		 * Convenience constructor for anonymous events.
		 * @param type		Type of event
		 * @param src		Source
		 */
		protected AbstractEvent(Type type, Source src) {
			this(type.name, type, src);
		}

		@Override
		public final String name() {
			return name;
		}

		@Override
		public final Type type() {
			return type;
		}

		@Override
		public final Source source() {
			return src;
		}

		@Override
		public boolean equals(Object obj) {
			return
					(obj == this) ||
					(obj instanceof AbstractEvent that) &&
					this.name.equals(that.name) &&
					this.type.equals(that.type) &&
					(this.src == that.src);
		}

		@Override
		public String toString() {
			return new ToStringBuilder(this)
					.append(name)
					.append(type)
					.build();
		}
	}
}
