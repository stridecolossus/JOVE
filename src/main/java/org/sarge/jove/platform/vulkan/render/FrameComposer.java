package org.sarge.jove.platform.vulkan.render;

import static org.sarge.lib.util.Check.notNull;

import java.util.*;
import java.util.function.Supplier;

import org.sarge.jove.platform.vulkan.VkCommandBufferUsage;
import org.sarge.jove.platform.vulkan.core.Command;

/**
 *
 * @author Sarge
 */
public class FrameComposer {
	private final FrameBuffer.Group frames;
	private final Supplier<Command.Buffer> factory;
//	private final Supplier<Command.Buffer> sequence;
	private final Supplier<List<Command>> sequence;
	private VkCommandBufferUsage[] flags = {VkCommandBufferUsage.ONE_TIME_SUBMIT};

	/**
	 * Constructor.
	 * @param frames		Frame buffers
	 * @param factory		Generates the command buffer for the render task
	 * @param sequence		Provides the render sequence for the next frame
	 */
	public FrameComposer(FrameBuffer.Group frames, Supplier<Command.Buffer> factory, Supplier<List<Command>> sequence) { //Supplier<Command.Buffer> sequence) {
		this.frames = notNull(frames);
		this.factory = notNull(factory);
		this.sequence = notNull(sequence);
	}

	/**
	 * Sets the creation flags for the render task.
	 * Default is {@link VkCommandBufferUsage#ONE_TIME_SUBMIT}.
	 * @param flags Creation flags
	 */
	public void flags(VkCommandBufferUsage[] flags) {
		this.flags = Arrays.copyOf(flags, flags.length);
	}

	/**
	 * Composes a render task for the next frame.
	 * TODO - doc
	 * @param index Frame index
	 * @return Render task
	 * @throws IllegalStateException if the command buffer generated by the factory is not a primary command buffer
	 * @throws IllegalStateException if the render sequence is not a secondary command buffer
	 * @throws IndexOutOfBoundsException for an invalid frame buffer index
	 */
	public Command.Buffer compose(int index) {
		// Init collaborators
		final Command.Buffer task = factory.get();
		//final Command.Buffer render = sequence.get();

		final FrameBuffer frame = frames.buffer(index);

		// Validate
		if(!task.isPrimary()) throw new IllegalStateException("Render task must be a primary command buffer");
		//if(render.isPrimary()) throw new IllegalStateException("Render sequence must be a secondary command buffer");

		// Record commands to render to the frame buffer

		final var r = task
				.begin(flags)
				.add(frame.begin());

		for(Command cmd : sequence.get()) {
			r.add(cmd);
		}

		return r.add(FrameBuffer.END).end();

//		return task
//				.begin(flags)
//    				.add(frame.begin())
//    					.add(List.of(render))
//    				.add(FrameBuffer.END)
//				.end();
	}
}
