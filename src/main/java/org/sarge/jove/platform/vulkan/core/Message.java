package org.sarge.jove.platform.vulkan.core;

import static java.util.stream.Collectors.joining;
import static org.sarge.lib.util.Check.notNull;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.StringJoiner;
import java.util.function.Consumer;

import org.sarge.jove.common.IntegerEnumeration;
import org.sarge.jove.platform.vulkan.VkDebugUtilsMessageSeverity;
import org.sarge.jove.platform.vulkan.VkDebugUtilsMessageType;
import org.sarge.jove.platform.vulkan.VkDebugUtilsMessengerCallbackData;
import org.sarge.jove.platform.vulkan.VkDebugUtilsMessengerCreateInfoEXT;
import org.sarge.lib.util.Check;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;

/**
 * A <i>message</i> is a diagnostics report generated by Vulkan.
 * @author Sarge
 */
public record Message(VkDebugUtilsMessageSeverity severity, Collection<VkDebugUtilsMessageType> types, VkDebugUtilsMessengerCallbackData data) {
	/**
	 * Constructor.
	 * @param severity		Severity
	 * @param types			Message type(s)
	 * @param data			Message data
	 */
	public Message {
		Check.notNull(severity);
		Check.notEmpty(types);
		Check.notNull(data);
	}

	/**
	 * Constructs a string representation of this message.
	 * <p>
	 * The message text is a colon-delimited string comprised of the following elements:
	 * <ul>
	 * <li>severity</li>
	 * <li>type(s) separated by the hyphen character</li>
	 * <li>message identifier</li>
	 * <li>message text</li>
	 * </ul>
	 * Example:
	 * <code>ERROR:VALIDATION-GENERAL:1234:message</code>
	 * <p>
	 * @return Message text
	 */
	@Override
	public String toString() {
		final String compoundTypes = types.stream().map(Enum::name).collect(joining("-"));
		final StringJoiner str = new StringJoiner(":");
		str.add(severity.name());
		str.add(compoundTypes);
		if(!data.pMessage.contains(data.pMessageIdName)) {
			str.add(data.pMessageIdName);
		}
		str.add(data.pMessage);
		return str.toString();
	}

	/**
	 * Builder for the descriptor for a message handler.
	 */
	public static class HandlerBuilder {
		/**
		 * Helper - Creates a diagnostics message handler with a default configuration.
		 * @return Default message handler
		 */
		public static VkDebugUtilsMessengerCreateInfoEXT create() {
			return new HandlerBuilder().init().build();
		}

		private final Set<VkDebugUtilsMessageSeverity> severity = new HashSet<>();
		private final Set<VkDebugUtilsMessageType> types = new HashSet<>();
		private Consumer<Message> consumer = System.err::println;

		/**
		 * Sets the message consumer (the default dumps messages to the error console).
		 * @param consumer Message consumer
		 */
		public HandlerBuilder consumer(Consumer<Message> consumer) {
			this.consumer = notNull(consumer);
			return this;
		}

		/**
		 * Adds a message severity to be reported by this handler.
		 * @param severity Message severity
		 */
		public HandlerBuilder severity(VkDebugUtilsMessageSeverity severity) {
			this.severity.add(notNull(severity));
			return this;
		}

		/**
		 * Adds a message type to be reported by this handler.
		 * @param type Message type
		 */
		public HandlerBuilder type(VkDebugUtilsMessageType type) {
			types.add(notNull(type));
			return this;
		}

		/**
		 * Convenience method - Initialises this builder to the following defaults:
		 * <ul>
		 * <li>warnings and higher</li>
		 * <li>general or validation message types</li>
		 * </ul>
		 */
		public HandlerBuilder init() {
			severity(VkDebugUtilsMessageSeverity.WARNING);
			severity(VkDebugUtilsMessageSeverity.ERROR);
			type(VkDebugUtilsMessageType.GENERAL);
			type(VkDebugUtilsMessageType.VALIDATION);
			return this;
		}

		/**
		 * Message callback.
		 * TODO - has to be class? lambda?
		 */
		private static class HandlerCallback implements Callback {
			private final Consumer<Message> consumer;

			private HandlerCallback(Consumer<Message> consumer) {
				this.consumer = consumer;
			}

			@SuppressWarnings("unused")
			public boolean message(int severity, int type, VkDebugUtilsMessengerCallbackData pCallbackData, Pointer pUserData) {
				// Transform bit-masks to enumerations
				final VkDebugUtilsMessageSeverity severityEnum = IntegerEnumeration.map(VkDebugUtilsMessageSeverity.class, severity);
				final Collection<VkDebugUtilsMessageType> typesEnum = IntegerEnumeration.enumerate(VkDebugUtilsMessageType.class, type);

				// Create message wrapper
				final Message message = new Message(severityEnum, typesEnum, pCallbackData);

				// Delegate to handler
				consumer.accept(message);

				// Continue execution
				return false;
			}
		}

		/**
		 * Constructs the handler descriptor.
		 * @return New handler descriptor
		 * @throws IllegalArgumentException if the message severities or types is empty
		 */
		public VkDebugUtilsMessengerCreateInfoEXT build() {
			// Validate
			if(severity.isEmpty()) throw new IllegalArgumentException("No message severities specified");
			if(types.isEmpty()) throw new IllegalArgumentException("No message types specified");

			// Build descriptor
			final VkDebugUtilsMessengerCreateInfoEXT info = new VkDebugUtilsMessengerCreateInfoEXT();
			info.messageSeverity = IntegerEnumeration.mask(severity);
			info.messageType = IntegerEnumeration.mask(types);
			info.pfnUserCallback = new HandlerCallback(consumer);
			info.pUserData = null;

			return info;
		}
	}
}
