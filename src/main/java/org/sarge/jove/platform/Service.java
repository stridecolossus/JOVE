package org.sarge.jove.platform;

import java.util.Set;
import java.util.stream.Stream;

import org.apache.commons.lang3.builder.ToStringBuilder;

/**
 * A <i>service</i> is a component of a platform.
 * @author Sarge
 */
public interface Service {
	/**
	 * Service error handler.
	 */
	@FunctionalInterface
	interface ErrorHandler {
		/**
		 * Handles an error.
		 * @param error Error description
		 */
		void handle(String error);

		/**
		 * Error handler that wraps errors in a {@link ServiceException}.
		 */
		ErrorHandler THROW = ServiceException::new;

		/**
		 * Error handler that logs error.
		 * TODO - log4J
		 */
		ErrorHandler LOGGER = System.err::println;
	}

	/**
	 * @return Name of this service
	 */
	String name();

	/**
	 * @return API version
	 */
	String version();

	/**
	 * Sets the error handler of this service.
	 * @param handler Error handler
	 */
	void handler(ErrorHandler handler);

	/**
	 * Close this service.
	 */
	void close();

	/**
	 * Exception generated by a service.
	 */
	class ServiceException extends RuntimeException {
		/**
		 * Constructor.
		 * @param message Message
		 */
		public ServiceException(String message) {
			super(message);
		}

		/**
		 * Constructor.
		 * @param message 		Message
		 * @param cause			Cause
		 */
		public ServiceException(String message, Throwable cause) {
			super(message, cause);
		}
	}

	/**
	 * Convenience class for a group of services.
	 */
	class Group {
		private final Set<Service> services;

		/**
		 * Constructor.
		 * @param services Services in this group
		 */
		public Group(Set<Service> services) {
			this.services = Set.copyOf(services);
		}

		/**
		 * @return Services in this group
		 */
		public Stream<Service> services() {
			return services.stream();
		}

		/**
		 * Closes all services in this group.
		 */
		public void close() {
			services.forEach(Service::close);
		}

		@Override
		public String toString() {
			return ToStringBuilder.reflectionToString(this);
		}
	}
}
