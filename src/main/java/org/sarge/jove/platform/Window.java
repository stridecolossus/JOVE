package org.sarge.jove.platform;

import static org.sarge.lib.util.Check.notEmpty;
import static org.sarge.lib.util.Check.notNull;

import java.util.Optional;

import org.sarge.jove.common.Dimensions;
import org.sarge.lib.util.AbstractEqualsObject;

/**
 * A <i>window</i> abstract a platform-specific window.
 */
public interface Window {
	/**
	 * Window properties.
	 */
	final class Properties extends AbstractEqualsObject {
		private final String title;
		private final Dimensions size;
		private final Optional<Monitor> monitor;

		/**
		 * Constructor.
		 * @param title			Window title
		 * @param size			Size
		 * @param monitor		Monitor
		 */
		public Properties(String title, Dimensions size, Monitor monitor) {
			this.title = notEmpty(title);
			this.size = notNull(size);
			this.monitor = Optional.ofNullable(monitor);
		}

		/**
		 * @return Window title
		 */
		public String title() {
			return title;
		}

		/**
		 * @return Size of this window
		 */
		public Dimensions size() {
			return size;
		}

		/**
		 * @return Monitor that this window
		 */
		public Optional<Monitor> monitor() {
			return monitor;
		}

		/**
		 * Builder for a set of window properties.
		 */
		public static class Builder {
			private String title;
			private Dimensions size;
			private Monitor monitor;

			/**
			 * Sets the window title.
			 * @param title Title
			 */
			public Builder title(String title) {
				this.title = title;
				return this;
			}

			/**
			 * Sets the size of the window.
			 * @param size Window size
			 */
			public Builder size(Dimensions size) {
				this.size = size;
				return this;
			}

			/**
			 * Sets the monitor for the window.
			 * @param monitor Monitor
			 */
			public Builder monitor(Monitor monitor) {
				this.monitor = monitor;
				return this;
			}

			/**
			 * Constructs this set of properties.
			 * @param New properties
			 */
			public Properties build() {
				return new Properties(title, size, monitor);
			}
		}
	}

	/**
	 * @return Properties of this window
	 */
	Properties properties();

	/**
	 * @return Whether this window is full-screen
	 */
	boolean isFullScreen();

	/**
	 * Input device for this window.
	 * @return Input device
	 */
	Device<?> device();

	/**
	 * Polls pending events generated by this window.
	 */
	void poll();

	// TODO - change mode/full/size

	/**
	 * Destroys this window.
	 */
	void destroy();
}
