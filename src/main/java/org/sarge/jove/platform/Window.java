package org.sarge.jove.platform;

import static org.sarge.lib.util.Check.notEmpty;
import static org.sarge.lib.util.Check.notNull;

import java.util.Optional;
import java.util.Set;
import java.util.function.Supplier;

import org.sarge.jove.common.Dimensions;
import org.sarge.lib.collection.StrictSet;
import org.sarge.lib.util.AbstractEqualsObject;

import com.sun.jna.Pointer;
import com.sun.jna.ptr.PointerByReference;

/**
 * A <i>window</i> abstracts a platform-specific desktop window.
 */
public interface Window {
	/**
	 * Creation descriptor for a window.
	 */
	final class Descriptor extends AbstractEqualsObject {
		/**
		 * Window properties.
		 */
		public enum Property {
			/**
			 * Window can be resized.
			 */
			RESIZABLE,

			/**
			 * Window has standard decorations (border, close icon, etc).
			 */
			DECORATED,

			/**
			 * Full-screen windows are iconified on focus loss.
			 */
			AUTO_ICONIFY,

			/**
			 * Window is initially maximised (ignores dimensions).
			 */
			MAXIMISED,

			/**
			 * Disables creation of an OpenGL context for this window.
			 */
			DISABLE_OPENGL,

			/**
			 * Whether this window should be full-screen.
			 */
			FULL_SCREEN,
		}

		private final String title;
		private final Dimensions size;
		private final Optional<Monitor> monitor;
		private final Set<Property> props;

		/**
		 * Constructor.
		 * @param title			Window title
		 * @param size			Size
		 * @param monitor		Monitor
		 * @param props			Properties
		 */
		public Descriptor(String title, Dimensions size, Monitor monitor, Set<Property> props) {
			this.title = notEmpty(title);
			this.size = notNull(size);
			this.monitor = Optional.ofNullable(monitor);
			this.props = Set.copyOf(props);
		}

		/**
		 * @return Window title
		 */
		public String title() {
			return title;
		}

		/**
		 * @return Size of this window
		 */
		public Dimensions size() {
			return size;
		}

		/**
		 * @return Monitor for this window
		 */
		public Optional<Monitor> monitor() {
			return monitor;
		}

		public Set<Property> properties() {
			return props;
		}

		/**
		 * Builder for a window descriptor.
		 */
		public static class Builder {
			private String title;
			private Dimensions size;
			private Monitor monitor;
			private final Set<Property> props = new StrictSet<>();

			/**
			 * Sets the window title.
			 * @param title Title
			 */
			public Builder title(String title) {
				this.title = title;
				return this;
			}

			/**
			 * Sets the size of the window.
			 * @param size Window size
			 */
			public Builder size(Dimensions size) {
				this.size = size;
				return this;
			}

			/**
			 * Sets the monitor for the window.
			 * @param monitor Monitor
			 */
			public Builder monitor(Monitor monitor) {
				this.monitor = monitor;
				return this;
			}

			/**
			 * Adds a window property.
			 * @param p Property
			 */
			public Builder property(Property p) {
				props.add(p);
				return this;
			}

			/**
			 * Constructs this descriptor.
			 * @param New descriptor
			 */
			public Descriptor build() {
				return new Descriptor(title, size, monitor, props);
			}
		}
	}

	/**
	 * @return Descriptor of this window
	 */
	Descriptor descriptor();

	/**
	 * Creates a Vulkan rendering surface for this window.
	 * @param vulkan 		Vulkan instance handle
	 * @param ref			Surface handle factory
	 * @return Surface handle
	 */
	Pointer surface(Pointer vulkan, Supplier<PointerByReference> ref);

	/**
	 * Input device for this window.
	 * @return Input device
	 */
	Device<?> device();

	/**
	 * Polls pending events generated by this window.
	 */
	void poll();

	// TODO - change mode/full/size

	/**
	 * Destroys this window.
	 */
	void destroy();
}
